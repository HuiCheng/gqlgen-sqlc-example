// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Devaa struct {
	Title *string `json:"title,omitempty"`
}

type ConnectType string

const (
	ConnectTypeSSH    ConnectType = "ssh"
	ConnectTypeTelnet ConnectType = "telnet"
)

var AllConnectType = []ConnectType{
	ConnectTypeSSH,
	ConnectTypeTelnet,
}

func (e ConnectType) IsValid() bool {
	switch e {
	case ConnectTypeSSH, ConnectTypeTelnet:
		return true
	}
	return false
}

func (e ConnectType) String() string {
	return string(e)
}

func (e *ConnectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConnectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConnectType", str)
	}
	return nil
}

func (e ConnectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceAuthType string

const (
	DeviceAuthTypeUsernamePassword DeviceAuthType = "username_password"
	DeviceAuthTypePrivateKey       DeviceAuthType = "private_key"
)

var AllDeviceAuthType = []DeviceAuthType{
	DeviceAuthTypeUsernamePassword,
	DeviceAuthTypePrivateKey,
}

func (e DeviceAuthType) IsValid() bool {
	switch e {
	case DeviceAuthTypeUsernamePassword, DeviceAuthTypePrivateKey:
		return true
	}
	return false
}

func (e DeviceAuthType) String() string {
	return string(e)
}

func (e *DeviceAuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceAuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceAuthType", str)
	}
	return nil
}

func (e DeviceAuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
