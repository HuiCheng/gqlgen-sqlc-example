// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: device_auth.sql

package db

import (
	"context"
	"strings"

	"idea2/graph/model"
)

const createDeviceAuth = `-- name: CreateDeviceAuth :one
INSERT INTO
  device_auth (title, type, username, password, private_key)
VALUES
  (?, ?, ?, ?, ?) RETURNING id, title, type, username, password, private_key, created_at, updated_at
`

type CreateDeviceAuthParams struct {
	Title      string
	Type       string
	Username   *model.NullString
	Password   *model.NullString
	PrivateKey *model.NullString
}

func (q *Queries) CreateDeviceAuth(ctx context.Context, arg *CreateDeviceAuthParams) (*DeviceAuth, error) {
	row := q.db.QueryRowContext(ctx, createDeviceAuth,
		arg.Title,
		arg.Type,
		arg.Username,
		arg.Password,
		arg.PrivateKey,
	)
	var i DeviceAuth
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Username,
		&i.Password,
		&i.PrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteDeviceAuth = `-- name: DeleteDeviceAuth :exec
DELETE FROM device_auth
Where
  id = ?
`

func (q *Queries) DeleteDeviceAuth(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceAuth, id)
	return err
}

const getDeviceAuth = `-- name: GetDeviceAuth :one
SELECT
  id, title, type, username, password, private_key, created_at, updated_at
FROM
  device_auth
WHERE
  id = ?
`

func (q *Queries) GetDeviceAuth(ctx context.Context, id int64) (*DeviceAuth, error) {
	row := q.db.QueryRowContext(ctx, getDeviceAuth, id)
	var i DeviceAuth
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Username,
		&i.Password,
		&i.PrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listDeviceAuth = `-- name: ListDeviceAuth :many
SELECT
  device_auth.id, device_auth.title, device_auth.type, device_auth.username, device_auth.password, device_auth.private_key, device_auth.created_at, device_auth.updated_at,
  count(device.id) as device_count
FROM
  device_auth
  LEFT JOIN device ON device_auth.id = device.auth_id
WHERE
  (IIF(?1, TRUE, NULL))
  OR (
    IIF(
      ?2,
      device_auth.id IN (/*SLICE:ids*/?),
      NULL
    )
  )
GROUP BY
  device_auth.id
LIMIT
  ?5
OFFSET
  ?4
`

type ListDeviceAuthParams struct {
	ByAll    interface{}
	ByIDs    interface{}
	Ids      []int64
	PageNum  int64
	PageSize int64
}

type ListDeviceAuthRow struct {
	ID          int64
	Title       string
	Type        string
	Username    *model.NullString
	Password    *model.NullString
	PrivateKey  *model.NullString
	CreatedAt   model.Timestamp
	UpdatedAt   *model.Timestamp
	DeviceCount int64
}

func (q *Queries) ListDeviceAuth(ctx context.Context, arg *ListDeviceAuthParams) ([]*ListDeviceAuthRow, error) {
	query := listDeviceAuth
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ByAll)
	queryParams = append(queryParams, arg.ByIDs)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.PageNum)
	queryParams = append(queryParams, arg.PageSize)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListDeviceAuthRow
	for rows.Next() {
		var i ListDeviceAuthRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Type,
			&i.Username,
			&i.Password,
			&i.PrivateKey,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeviceCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeviceAuth = `-- name: UpdateDeviceAuth :one
UPDATE device_auth
SET
  title = ?,
  type = ?,
  username = ?,
  password = ?,
  private_key = ?,
  updated_at = DATETIME('now', 'localtime')
WHERE
  id = ? RETURNING id, title, type, username, password, private_key, created_at, updated_at
`

type UpdateDeviceAuthParams struct {
	Title      string
	Type       string
	Username   *model.NullString
	Password   *model.NullString
	PrivateKey *model.NullString
	ID         int64
}

func (q *Queries) UpdateDeviceAuth(ctx context.Context, arg *UpdateDeviceAuthParams) (*DeviceAuth, error) {
	row := q.db.QueryRowContext(ctx, updateDeviceAuth,
		arg.Title,
		arg.Type,
		arg.Username,
		arg.Password,
		arg.PrivateKey,
		arg.ID,
	)
	var i DeviceAuth
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Type,
		&i.Username,
		&i.Password,
		&i.PrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
